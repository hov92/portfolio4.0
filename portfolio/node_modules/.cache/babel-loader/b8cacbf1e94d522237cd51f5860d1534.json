{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/dwaynehovington/Desktop/portfolio4.00/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/dwaynehovington/Desktop/portfolio4.00/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/dwaynehovington/Desktop/portfolio4.00/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/dwaynehovington/Desktop/portfolio4.00/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OutOfCanvasUpdater = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar Utils_2 = require(\"./Utils\");\n\nvar OutOfCanvasUpdater = /*#__PURE__*/function () {\n  function OutOfCanvasUpdater(container) {\n    _classCallCheck(this, OutOfCanvasUpdater);\n\n    this.container = container;\n  }\n\n  _createClass(OutOfCanvasUpdater, [{\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return !particle.destroyed && !particle.spawning;\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      var _a, _b, _c, _d;\n\n      var outModes = particle.options.move.outModes;\n      this.updateOutMode(particle, delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n      this.updateOutMode(particle, delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n      this.updateOutMode(particle, delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n      this.updateOutMode(particle, delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n    }\n  }, {\n    key: \"updateOutMode\",\n    value: function updateOutMode(particle, delta, outMode, direction) {\n      switch (outMode) {\n        case Enums_1.OutMode.bounce:\n        case Enums_1.OutMode.bounceVertical:\n        case Enums_1.OutMode.bounceHorizontal:\n        case \"bounceVertical\":\n        case \"bounceHorizontal\":\n        case Enums_1.OutMode.split:\n          this.bounce(particle, delta, direction, outMode);\n          break;\n\n        case Enums_1.OutMode.destroy:\n          this.destroy(particle, direction);\n          break;\n\n        case Enums_1.OutMode.out:\n          this.out(particle, direction);\n          break;\n\n        case Enums_1.OutMode.none:\n        default:\n          this.none(particle, direction);\n          break;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(particle, direction) {\n      var container = this.container;\n\n      if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n        return;\n      }\n\n      container.particles.remove(particle, undefined, true);\n    }\n  }, {\n    key: \"out\",\n    value: function out(particle, direction) {\n      var container = this.container;\n\n      if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n        return;\n      }\n\n      var wrap = particle.options.move.warp,\n          canvasSize = container.canvas.size,\n          newPos = {\n        bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\n        left: -particle.getRadius() - particle.offset.x,\n        right: canvasSize.width + particle.getRadius() + particle.offset.x,\n        top: -particle.getRadius() - particle.offset.y\n      },\n          sizeValue = particle.getRadius(),\n          nextBounds = Utils_1.calculateBounds(particle.position, sizeValue);\n\n      if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width + particle.offset.x) {\n        particle.position.x = newPos.left;\n        particle.initialPosition.x = particle.position.x;\n\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n          particle.initialPosition.y = particle.position.y;\n        }\n      } else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n        particle.position.x = newPos.right;\n        particle.initialPosition.x = particle.position.x;\n\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n          particle.initialPosition.y = particle.position.y;\n        }\n      }\n\n      if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height + particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n          particle.initialPosition.x = particle.position.x;\n        }\n\n        particle.position.y = newPos.top;\n        particle.initialPosition.y = particle.position.y;\n      } else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n          particle.initialPosition.x = particle.position.x;\n        }\n\n        particle.position.y = newPos.bottom;\n        particle.initialPosition.y = particle.position.y;\n      }\n    }\n  }, {\n    key: \"bounce\",\n    value: function bounce(particle, delta, direction, outMode) {\n      var container = this.container;\n      var handled = false;\n\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.particleBounce !== undefined) {\n            handled = plugin.particleBounce(particle, delta, direction);\n          }\n\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (handled) {\n        return;\n      }\n\n      var pos = particle.getPosition(),\n          offset = particle.offset,\n          size = particle.getRadius(),\n          bounds = Utils_1.calculateBounds(pos, size),\n          canvasSize = container.canvas.size;\n      Utils_2.bounceHorizontal({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n      Utils_2.bounceVertical({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n    }\n  }, {\n    key: \"none\",\n    value: function none(particle, direction) {\n      if (particle.options.move.distance.horizontal && (direction === Enums_1.OutModeDirection.left || direction === Enums_1.OutModeDirection.right) || particle.options.move.distance.vertical && (direction === Enums_1.OutModeDirection.top || direction === Enums_1.OutModeDirection.bottom)) {\n        return;\n      }\n\n      var gravityOptions = particle.options.move.gravity,\n          container = this.container;\n      var canvasSize = container.canvas.size;\n      var pRadius = particle.getRadius();\n\n      if (!gravityOptions.enable) {\n        if (particle.velocity.y > 0 && particle.position.y <= canvasSize.height + pRadius || particle.velocity.y < 0 && particle.position.y >= -pRadius || particle.velocity.x > 0 && particle.position.x <= canvasSize.width + pRadius || particle.velocity.x < 0 && particle.position.x >= -pRadius) {\n          return;\n        }\n\n        if (!Utils_1.isPointInside(particle.position, container.canvas.size, pRadius, direction)) {\n          container.particles.remove(particle);\n        }\n      } else {\n        var position = particle.position;\n\n        if (!gravityOptions.inverse && position.y > canvasSize.height + pRadius && direction === Enums_1.OutModeDirection.bottom || gravityOptions.inverse && position.y < -pRadius && direction === Enums_1.OutModeDirection.top) {\n          container.particles.remove(particle);\n        }\n      }\n    }\n  }]);\n\n  return OutOfCanvasUpdater;\n}();\n\nexports.OutOfCanvasUpdater = OutOfCanvasUpdater;","map":{"version":3,"sources":["/Users/dwaynehovington/Desktop/portfolio4.00/portfolio/node_modules/tsparticles/Updaters/OutModes/OutOfCanvasUpdater.js"],"names":["Object","defineProperty","exports","value","OutOfCanvasUpdater","Utils_1","require","Enums_1","Utils_2","container","particle","destroyed","spawning","delta","_a","_b","_c","_d","outModes","options","move","updateOutMode","bottom","default","OutModeDirection","left","right","top","outMode","direction","OutMode","bounce","bounceVertical","bounceHorizontal","split","destroy","out","none","isPointInside","position","canvas","size","getRadius","particles","remove","undefined","wrap","warp","canvasSize","newPos","height","offset","y","x","width","sizeValue","nextBounds","calculateBounds","initialPosition","Math","random","handled","plugins","plugin","particleBounce","pos","getPosition","bounds","distance","horizontal","vertical","gravityOptions","gravity","pRadius","enable","velocity","inverse"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OutOfCanvasUpdater = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nconst Utils_2 = require(\"./Utils\");\nclass OutOfCanvasUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning;\n    }\n    update(particle, delta) {\n        var _a, _b, _c, _d;\n        const outModes = particle.options.move.outModes;\n        this.updateOutMode(particle, delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n        this.updateOutMode(particle, delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n        this.updateOutMode(particle, delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n        this.updateOutMode(particle, delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n    }\n    updateOutMode(particle, delta, outMode, direction) {\n        switch (outMode) {\n            case Enums_1.OutMode.bounce:\n            case Enums_1.OutMode.bounceVertical:\n            case Enums_1.OutMode.bounceHorizontal:\n            case \"bounceVertical\":\n            case \"bounceHorizontal\":\n            case Enums_1.OutMode.split:\n                this.bounce(particle, delta, direction, outMode);\n                break;\n            case Enums_1.OutMode.destroy:\n                this.destroy(particle, direction);\n                break;\n            case Enums_1.OutMode.out:\n                this.out(particle, direction);\n                break;\n            case Enums_1.OutMode.none:\n            default:\n                this.none(particle, direction);\n                break;\n        }\n    }\n    destroy(particle, direction) {\n        const container = this.container;\n        if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            return;\n        }\n        container.particles.remove(particle, undefined, true);\n    }\n    out(particle, direction) {\n        const container = this.container;\n        if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            return;\n        }\n        const wrap = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {\n            bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\n            left: -particle.getRadius() - particle.offset.x,\n            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n            top: -particle.getRadius() - particle.offset.y,\n        }, sizeValue = particle.getRadius(), nextBounds = Utils_1.calculateBounds(particle.position, sizeValue);\n        if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width + particle.offset.x) {\n            particle.position.x = newPos.left;\n            particle.initialPosition.x = particle.position.x;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n                particle.initialPosition.y = particle.position.y;\n            }\n        }\n        else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n            particle.position.x = newPos.right;\n            particle.initialPosition.x = particle.position.x;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n                particle.initialPosition.y = particle.position.y;\n            }\n        }\n        if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height + particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n                particle.initialPosition.x = particle.position.x;\n            }\n            particle.position.y = newPos.top;\n            particle.initialPosition.y = particle.position.y;\n        }\n        else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n                particle.initialPosition.x = particle.position.x;\n            }\n            particle.position.y = newPos.bottom;\n            particle.initialPosition.y = particle.position.y;\n        }\n    }\n    bounce(particle, delta, direction, outMode) {\n        const container = this.container;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = Utils_1.calculateBounds(pos, size), canvasSize = container.canvas.size;\n        Utils_2.bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        Utils_2.bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n    none(particle, direction) {\n        if ((particle.options.move.distance.horizontal &&\n            (direction === Enums_1.OutModeDirection.left || direction === Enums_1.OutModeDirection.right)) ||\n            (particle.options.move.distance.vertical &&\n                (direction === Enums_1.OutModeDirection.top || direction === Enums_1.OutModeDirection.bottom))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity, container = this.container;\n        const canvasSize = container.canvas.size;\n        const pRadius = particle.getRadius();\n        if (!gravityOptions.enable) {\n            if ((particle.velocity.y > 0 && particle.position.y <= canvasSize.height + pRadius) ||\n                (particle.velocity.y < 0 && particle.position.y >= -pRadius) ||\n                (particle.velocity.x > 0 && particle.position.x <= canvasSize.width + pRadius) ||\n                (particle.velocity.x < 0 && particle.position.x >= -pRadius)) {\n                return;\n            }\n            if (!Utils_1.isPointInside(particle.position, container.canvas.size, pRadius, direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > canvasSize.height + pRadius &&\n                direction === Enums_1.OutModeDirection.bottom) ||\n                (gravityOptions.inverse && position.y < -pRadius && direction === Enums_1.OutModeDirection.top)) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\nexports.OutOfCanvasUpdater = OutOfCanvasUpdater;\n"]},"metadata":{},"sourceType":"script"}