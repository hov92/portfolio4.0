{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/dwaynehovington/Desktop/portfolio4.00/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceColorSvg = exports.downloadSvgImage = exports.loadImage = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nfunction loadImage(source) {\n  return new Promise(function (resolve, reject) {\n    if (!source) {\n      reject(\"Error tsParticles - No image.src\");\n      return;\n    }\n\n    var image = {\n      source: source,\n      type: source.substr(source.length - 3)\n    };\n    var img = new Image();\n    img.addEventListener(\"load\", function () {\n      image.element = img;\n      resolve(image);\n    });\n    img.addEventListener(\"error\", function () {\n      reject(\"Error tsParticles - loading image: \".concat(source));\n    });\n    img.src = source;\n  });\n}\n\nexports.loadImage = loadImage;\n\nfunction downloadSvgImage(source) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var image, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (source) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error(\"Error tsParticles - No image.src\");\n\n          case 2:\n            image = {\n              source: source,\n              type: source.substr(source.length - 3)\n            };\n\n            if (!(image.type !== \"svg\")) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", loadImage(source));\n\n          case 5:\n            _context.next = 7;\n            return fetch(image.source);\n\n          case 7:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 10;\n              break;\n            }\n\n            throw new Error(\"Error tsParticles - Image not found\");\n\n          case 10:\n            _context.next = 12;\n            return response.text();\n\n          case 12:\n            image.svgData = _context.sent;\n            return _context.abrupt(\"return\", image);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.downloadSvgImage = downloadSvgImage;\n\nfunction replaceColorSvg(imageShape, color, opacity) {\n  var svgData = imageShape.svgData;\n\n  if (!svgData) {\n    return \"\";\n  }\n\n  if (svgData.includes(\"fill\")) {\n    var currentColor = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\n    return svgData.replace(currentColor, function () {\n      return Utils_1.getStyleFromHsl(color, opacity);\n    });\n  }\n\n  var preFillIndex = svgData.indexOf(\">\");\n  return \"\".concat(svgData.substring(0, preFillIndex), \" fill=\\\"\").concat(Utils_1.getStyleFromHsl(color, opacity), \"\\\"\").concat(svgData.substring(preFillIndex));\n}\n\nexports.replaceColorSvg = replaceColorSvg;","map":{"version":3,"sources":["/Users/dwaynehovington/Desktop/portfolio4.00/portfolio/node_modules/tsparticles/Shapes/Image/Utils.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","replaceColorSvg","downloadSvgImage","loadImage","Utils_1","require","source","image","type","substr","length","img","Image","addEventListener","element","src","Error","fetch","response","ok","text","svgData","imageShape","color","opacity","includes","currentColor","replace","getStyleFromHsl","preFillIndex","indexOf","substring"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.replaceColorSvg = exports.downloadSvgImage = exports.loadImage = void 0;\nconst Utils_1 = require(\"../../Utils\");\nfunction loadImage(source) {\n    return new Promise((resolve, reject) => {\n        if (!source) {\n            reject(\"Error tsParticles - No image.src\");\n            return;\n        }\n        const image = {\n            source: source,\n            type: source.substr(source.length - 3),\n        };\n        const img = new Image();\n        img.addEventListener(\"load\", () => {\n            image.element = img;\n            resolve(image);\n        });\n        img.addEventListener(\"error\", () => {\n            reject(`Error tsParticles - loading image: ${source}`);\n        });\n        img.src = source;\n    });\n}\nexports.loadImage = loadImage;\nfunction downloadSvgImage(source) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!source) {\n            throw new Error(\"Error tsParticles - No image.src\");\n        }\n        const image = {\n            source: source,\n            type: source.substr(source.length - 3),\n        };\n        if (image.type !== \"svg\") {\n            return loadImage(source);\n        }\n        const response = yield fetch(image.source);\n        if (!response.ok) {\n            throw new Error(\"Error tsParticles - Image not found\");\n        }\n        image.svgData = yield response.text();\n        return image;\n    });\n}\nexports.downloadSvgImage = downloadSvgImage;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    if (svgData.includes(\"fill\")) {\n        const currentColor = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\n        return svgData.replace(currentColor, () => Utils_1.getStyleFromHsl(color, opacity));\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(0, preFillIndex)} fill=\"${Utils_1.getStyleFromHsl(color, opacity)}\"${svgData.substring(preFillIndex)}`;\n}\nexports.replaceColorSvg = replaceColorSvg;\n"]},"metadata":{},"sourceType":"script"}