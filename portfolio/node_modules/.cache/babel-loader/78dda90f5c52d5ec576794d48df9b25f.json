{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/dwaynehovington/Desktop/portfolio4.0/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/dwaynehovington/Desktop/portfolio4.0/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nfunction applyDistance(particle) {\n  var initialPosition = particle.initialPosition;\n\n  var _Utils_1$getDistances = Utils_1.getDistances(initialPosition, particle.position),\n      dx = _Utils_1$getDistances.dx,\n      dy = _Utils_1$getDistances.dy;\n\n  var dxFixed = Math.abs(dx),\n      dyFixed = Math.abs(dy);\n  var hDistance = particle.maxDistance.horizontal;\n  var vDistance = particle.maxDistance.vertical;\n\n  if (!hDistance && !vDistance) {\n    return;\n  }\n\n  if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    }\n\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    var pos = particle.position,\n        vel = particle.velocity;\n\n    if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n      vel.x *= -Math.random();\n    }\n\n    if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n      vel.y *= -Math.random();\n    }\n  }\n}\n\nvar Mover = /*#__PURE__*/function () {\n  function Mover(container) {\n    _classCallCheck(this, Mover);\n\n    this.container = container;\n  }\n\n  _createClass(Mover, [{\n    key: \"move\",\n    value: function move(particle, delta) {\n      if (particle.destroyed) {\n        return;\n      }\n\n      this.moveParticle(particle, delta);\n      this.moveParallax(particle);\n    }\n  }, {\n    key: \"moveParticle\",\n    value: function moveParticle(particle, delta) {\n      var _a, _b, _c;\n\n      var particleOptions = particle.options;\n      var moveOptions = particleOptions.move;\n\n      if (!moveOptions.enable) {\n        return;\n      }\n\n      var container = this.container,\n          slowFactor = this.getProximitySpeedFactor(particle),\n          baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : particle.moveSpeed = Utils_1.getRangeValue(moveOptions.speed) * container.retina.pixelRatio) * container.retina.reduceFactor,\n          moveDrift = (_b = particle.moveDrift) !== null && _b !== void 0 ? _b : particle.moveDrift = Utils_1.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio,\n          maxSize = Utils_1.getRangeMax(particleOptions.size.value) * container.retina.pixelRatio,\n          sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n          diffFactor = 2,\n          speedFactor = sizeFactor * slowFactor * (delta.factor || 1) / diffFactor,\n          moveSpeed = baseSpeed * speedFactor;\n      this.applyPath(particle, delta);\n      var gravityOptions = moveOptions.gravity;\n      var gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n\n      if (gravityOptions.enable && moveSpeed) {\n        particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n      }\n\n      if (moveDrift && moveSpeed) {\n        particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n      }\n\n      var decay = 1 - particle.options.move.decay;\n\n      if (decay != 1) {\n        particle.velocity.multTo(decay);\n      }\n\n      var velocity = particle.velocity.mult(moveSpeed);\n      var maxSpeed = (_c = particle.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n\n      if (gravityOptions.enable && gravityOptions.maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n        velocity.y = gravityFactor * maxSpeed;\n\n        if (moveSpeed) {\n          particle.velocity.y = velocity.y / moveSpeed;\n        }\n      }\n\n      var zIndexOptions = particle.options.zIndex,\n          zVelocityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.velocityRate);\n\n      if (moveOptions.spin.enable) {\n        this.spin(particle, moveSpeed);\n      } else {\n        if (zVelocityFactor != 1) {\n          velocity.multTo(zVelocityFactor);\n        }\n\n        particle.position.addTo(velocity);\n\n        if (moveOptions.vibrate) {\n          particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n          particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n        }\n      }\n\n      applyDistance(particle);\n    }\n  }, {\n    key: \"spin\",\n    value: function spin(particle, moveSpeed) {\n      var container = this.container;\n\n      if (!particle.spin) {\n        return;\n      }\n\n      var updateFunc = {\n        x: particle.spin.direction === Enums_1.RotateDirection.clockwise ? Math.cos : Math.sin,\n        y: particle.spin.direction === Enums_1.RotateDirection.clockwise ? Math.sin : Math.cos\n      };\n      particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n      particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n      particle.spin.radius += particle.spin.acceleration;\n      var maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n\n      if (particle.spin.radius > maxCanvasSize / 2) {\n        particle.spin.radius = maxCanvasSize / 2;\n        particle.spin.acceleration *= -1;\n      } else if (particle.spin.radius < 0) {\n        particle.spin.radius = 0;\n        particle.spin.acceleration *= -1;\n      }\n\n      particle.spin.angle += moveSpeed / 100 * (1 - particle.spin.radius / maxCanvasSize);\n    }\n  }, {\n    key: \"applyPath\",\n    value: function applyPath(particle, delta) {\n      var particlesOptions = particle.options;\n      var pathOptions = particlesOptions.move.path;\n      var pathEnabled = pathOptions.enable;\n\n      if (!pathEnabled) {\n        return;\n      }\n\n      var container = this.container;\n\n      if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n      }\n\n      var path = container.pathGenerator.generate(particle);\n      particle.velocity.addTo(path);\n\n      if (pathOptions.clamp) {\n        particle.velocity.x = Utils_1.clamp(particle.velocity.x, -1, 1);\n        particle.velocity.y = Utils_1.clamp(particle.velocity.y, -1, 1);\n      }\n\n      particle.lastPathTime -= particle.pathDelay;\n    }\n  }, {\n    key: \"moveParallax\",\n    value: function moveParallax(particle) {\n      var container = this.container;\n      var options = container.actualOptions;\n\n      if (Utils_1.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n        return;\n      }\n\n      var parallaxForce = options.interactivity.events.onHover.parallax.force;\n      var mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      var canvasCenter = {\n        x: container.canvas.size.width / 2,\n        y: container.canvas.size.height / 2\n      };\n      var parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n      var factor = particle.getRadius() / parallaxForce;\n      var tmp = {\n        x: (mousePos.x - canvasCenter.x) * factor,\n        y: (mousePos.y - canvasCenter.y) * factor\n      };\n      particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n      particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n  }, {\n    key: \"getProximitySpeedFactor\",\n    value: function getProximitySpeedFactor(particle) {\n      var container = this.container;\n      var options = container.actualOptions;\n      var active = Utils_1.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n      if (!active) {\n        return 1;\n      }\n\n      var mousePos = this.container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return 1;\n      }\n\n      var particlePos = particle.getPosition();\n      var dist = Utils_1.getDistance(mousePos, particlePos);\n      var radius = container.retina.slowModeRadius;\n\n      if (dist > radius) {\n        return 1;\n      }\n\n      var proximityFactor = dist / radius || 0;\n      var slowFactor = options.interactivity.modes.slow.factor;\n      return proximityFactor / slowFactor;\n    }\n  }]);\n\n  return Mover;\n}();\n\nexports.Mover = Mover;","map":{"version":3,"sources":["/Users/dwaynehovington/Desktop/portfolio4.0/portfolio/node_modules/tsparticles/Core/Particle/Mover.js"],"names":["Object","defineProperty","exports","value","Mover","Utils_1","require","Enums_1","applyDistance","particle","initialPosition","getDistances","position","dx","dy","dxFixed","Math","abs","dyFixed","hDistance","maxDistance","horizontal","vDistance","vertical","misplaced","velocity","x","y","pos","vel","random","container","delta","destroyed","moveParticle","moveParallax","_a","_b","_c","particleOptions","options","moveOptions","move","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","getRangeValue","speed","retina","pixelRatio","reduceFactor","moveDrift","drift","maxSize","getRangeMax","size","sizeFactor","getRadius","diffFactor","speedFactor","factor","applyPath","gravityOptions","gravity","gravityFactor","inverse","acceleration","decay","multTo","mult","maxSpeed","zIndexOptions","zIndex","zVelocityFactor","pow","zIndexFactor","velocityRate","spin","addTo","vibrate","sin","cos","updateFunc","direction","RotateDirection","clockwise","center","radius","angle","maxCanvasSize","max","canvas","width","height","particlesOptions","pathOptions","path","pathEnabled","lastPathTime","pathDelay","pathGenerator","generate","clamp","actualOptions","isSsr","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","canvasCenter","parallaxSmooth","smooth","tmp","offset","active","isInArray","HoverMode","slow","mode","particlePos","getPosition","dist","getDistance","slowModeRadius","proximityFactor","modes"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Mover = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nfunction applyDistance(particle) {\n    const initialPosition = particle.initialPosition;\n    const { dx, dy } = Utils_1.getDistances(initialPosition, particle.position);\n    const dxFixed = Math.abs(dx), dyFixed = Math.abs(dy);\n    const hDistance = particle.maxDistance.horizontal;\n    const vDistance = particle.maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -Math.random();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -Math.random();\n        }\n    }\n}\nclass Mover {\n    constructor(container) {\n        this.container = container;\n    }\n    move(particle, delta) {\n        if (particle.destroyed) {\n            return;\n        }\n        this.moveParticle(particle, delta);\n        this.moveParallax(particle);\n    }\n    moveParticle(particle, delta) {\n        var _a, _b, _c;\n        const particleOptions = particle.options;\n        const moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = this.container, slowFactor = this.getProximitySpeedFactor(particle), baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : (particle.moveSpeed = Utils_1.getRangeValue(moveOptions.speed) * container.retina.pixelRatio)) *\n            container.retina.reduceFactor, moveDrift = ((_b = particle.moveDrift) !== null && _b !== void 0 ? _b : (particle.moveDrift = Utils_1.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio)), maxSize = Utils_1.getRangeMax(particleOptions.size.value) * container.retina.pixelRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, diffFactor = 2, speedFactor = (sizeFactor * slowFactor * (delta.factor || 1)) / diffFactor, moveSpeed = baseSpeed * speedFactor;\n        this.applyPath(particle, delta);\n        const gravityOptions = moveOptions.gravity;\n        const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n        if (gravityOptions.enable && moveSpeed) {\n            particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n        }\n        if (moveDrift && moveSpeed) {\n            particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n        }\n        const decay = 1 - particle.options.move.decay;\n        if (decay != 1) {\n            particle.velocity.multTo(decay);\n        }\n        const velocity = particle.velocity.mult(moveSpeed);\n        const maxSpeed = (_c = particle.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n        if (gravityOptions.enable &&\n            gravityOptions.maxSpeed > 0 &&\n            ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n                (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n            velocity.y = gravityFactor * maxSpeed;\n            if (moveSpeed) {\n                particle.velocity.y = velocity.y / moveSpeed;\n            }\n        }\n        const zIndexOptions = particle.options.zIndex, zVelocityFactor = Math.pow((1 - particle.zIndexFactor), zIndexOptions.velocityRate);\n        if (moveOptions.spin.enable) {\n            this.spin(particle, moveSpeed);\n        }\n        else {\n            if (zVelocityFactor != 1) {\n                velocity.multTo(zVelocityFactor);\n            }\n            particle.position.addTo(velocity);\n            if (moveOptions.vibrate) {\n                particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n                particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n            }\n        }\n        applyDistance(particle);\n    }\n    spin(particle, moveSpeed) {\n        const container = this.container;\n        if (!particle.spin) {\n            return;\n        }\n        const updateFunc = {\n            x: particle.spin.direction === Enums_1.RotateDirection.clockwise ? Math.cos : Math.sin,\n            y: particle.spin.direction === Enums_1.RotateDirection.clockwise ? Math.sin : Math.cos,\n        };\n        particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n        particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n        particle.spin.radius += particle.spin.acceleration;\n        const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n        if (particle.spin.radius > maxCanvasSize / 2) {\n            particle.spin.radius = maxCanvasSize / 2;\n            particle.spin.acceleration *= -1;\n        }\n        else if (particle.spin.radius < 0) {\n            particle.spin.radius = 0;\n            particle.spin.acceleration *= -1;\n        }\n        particle.spin.angle += (moveSpeed / 100) * (1 - particle.spin.radius / maxCanvasSize);\n    }\n    applyPath(particle, delta) {\n        const particlesOptions = particle.options;\n        const pathOptions = particlesOptions.move.path;\n        const pathEnabled = pathOptions.enable;\n        if (!pathEnabled) {\n            return;\n        }\n        const container = this.container;\n        if (particle.lastPathTime <= particle.pathDelay) {\n            particle.lastPathTime += delta.value;\n            return;\n        }\n        const path = container.pathGenerator.generate(particle);\n        particle.velocity.addTo(path);\n        if (pathOptions.clamp) {\n            particle.velocity.x = Utils_1.clamp(particle.velocity.x, -1, 1);\n            particle.velocity.y = Utils_1.clamp(particle.velocity.y, -1, 1);\n        }\n        particle.lastPathTime -= particle.pathDelay;\n    }\n    moveParallax(particle) {\n        const container = this.container;\n        const options = container.actualOptions;\n        if (Utils_1.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasCenter = {\n            x: container.canvas.size.width / 2,\n            y: container.canvas.size.height / 2,\n        };\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n        const factor = particle.getRadius() / parallaxForce;\n        const tmp = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        };\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n    getProximitySpeedFactor(particle) {\n        const container = this.container;\n        const options = container.actualOptions;\n        const active = Utils_1.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n        if (!active) {\n            return 1;\n        }\n        const mousePos = this.container.interactivity.mouse.position;\n        if (!mousePos) {\n            return 1;\n        }\n        const particlePos = particle.getPosition();\n        const dist = Utils_1.getDistance(mousePos, particlePos);\n        const radius = container.retina.slowModeRadius;\n        if (dist > radius) {\n            return 1;\n        }\n        const proximityFactor = dist / radius || 0;\n        const slowFactor = options.interactivity.modes.slow.factor;\n        return proximityFactor / slowFactor;\n    }\n}\nexports.Mover = Mover;\n"]},"metadata":{},"sourceType":"script"}