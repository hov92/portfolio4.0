{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\n\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\n\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n\nconst Enums_1 = require(\"../Enums\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst Vector_1 = require(\"./Particle/Vector\");\n\nconst Vector3d_1 = require(\"./Particle/Vector3d\");\n\nclass Particle {\n  constructor(id, container, position, overrideOptions, group) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n\n    this.id = id;\n    this.container = container;\n    this.group = group;\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.maxDistance = {};\n    const pxRatio = container.retina.pixelRatio;\n    const options = container.actualOptions;\n    const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n    particlesOptions.load(options.particles);\n    const shapeType = particlesOptions.shape.type;\n    const reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? Utils_1.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? Utils_1.itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n\n      const shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n      }\n    } else {\n      this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    const zIndexValue = Utils_1.getRangeValue(this.options.zIndex.value);\n    this.pathDelay = Utils_1.getValue(this.options.move.path.delay) * 1000;\n    this.wobbleDistance = 0;\n    container.retina.initParticle(this);\n    const sizeOptions = this.options.size;\n    const sizeValue = Utils_1.getValue(sizeOptions) * container.retina.pixelRatio;\n    const sizeRange = sizeOptions.value;\n    this.size = {\n      enable: sizeOptions.animation.enable,\n      value: sizeValue,\n      max: Utils_1.getRangeMax(sizeRange) * pxRatio,\n      min: Utils_1.getRangeMin(sizeRange) * pxRatio,\n      loops: 0,\n      maxLoops: sizeOptions.animation.count\n    };\n    const sizeAnimation = sizeOptions.animation;\n\n    if (sizeAnimation.enable) {\n      this.size.status = Enums_1.AnimationStatus.increasing;\n\n      switch (sizeAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.size.value = this.size.min;\n          this.size.status = Enums_1.AnimationStatus.increasing;\n          break;\n\n        case Enums_1.StartValueType.random:\n          this.size.value = Utils_1.randomInRange(this.size) * pxRatio;\n          this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n\n        case Enums_1.StartValueType.max:\n        default:\n          this.size.value = this.size.max;\n          this.size.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n\n      this.size.velocity = ((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    this.direction = Utils_1.getParticleDirectionAngle(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    const rotateOptions = this.options.rotate;\n    this.rotate = {\n      enable: rotateOptions.animation.enable,\n      value: Utils_1.getRangeValue(rotateOptions.value) * Math.PI / 180\n    };\n    let rotateDirection = rotateOptions.direction;\n\n    if (rotateDirection === Enums_1.RotateDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n    }\n\n    switch (rotateDirection) {\n      case Enums_1.RotateDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.rotate.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.RotateDirection.clockwise:\n        this.rotate.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    const rotateAnimation = this.options.rotate.animation;\n\n    if (rotateAnimation.enable) {\n      this.rotate.velocity = rotateAnimation.speed / 360 * container.retina.reduceFactor;\n\n      if (!rotateAnimation.sync) {\n        this.rotate.velocity *= Math.random();\n      }\n    }\n\n    const tiltOptions = this.options.tilt;\n    this.tilt = {\n      enable: tiltOptions.enable,\n      value: Utils_1.getRangeValue(tiltOptions.value) * Math.PI / 180,\n      sinDirection: Math.random() >= 0.5 ? 1 : -1,\n      cosDirection: Math.random() >= 0.5 ? 1 : -1\n    };\n    let tiltDirection = tiltOptions.direction;\n\n    if (tiltDirection === Enums_1.TiltDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n    }\n\n    switch (tiltDirection) {\n      case Enums_1.TiltDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.tilt.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.TiltDirection.clockwise:\n        this.tilt.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    const tiltAnimation = this.options.tilt.animation;\n\n    if (tiltAnimation.enable) {\n      this.tilt.velocity = tiltAnimation.speed / 360 * container.retina.reduceFactor;\n\n      if (!tiltAnimation.sync) {\n        this.tilt.velocity *= Math.random();\n      }\n    }\n\n    const orbitOptions = particlesOptions.orbit;\n\n    if (orbitOptions.enable) {\n      this.orbitRotation = Utils_1.getRangeValue(orbitOptions.rotation.value);\n      this.orbitColor = Utils_1.colorToHsl(orbitOptions.color);\n    }\n\n    const hslColor = Utils_1.colorToHsl(this.options.color, this.id, reduceDuplicates);\n\n    if (hslColor) {\n      this.color = Utils_1.getHslAnimationFromHsl(hslColor, this.options.color.animation, container.retina.reduceFactor);\n    }\n\n    const gradient = this.options.gradient instanceof Array ? Utils_1.itemFromArray(this.options.gradient) : this.options.gradient;\n\n    if (gradient) {\n      this.gradient = {\n        angle: {\n          value: gradient.angle.value,\n          enable: gradient.angle.animation.enable,\n          velocity: gradient.angle.animation.speed / 360 * container.retina.reduceFactor\n        },\n        type: gradient.type,\n        colors: []\n      };\n      let rotateDirection = gradient.angle.direction;\n\n      if (rotateDirection === Enums_1.RotateDirection.random) {\n        const index = Math.floor(Math.random() * 2);\n        rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n      }\n\n      switch (rotateDirection) {\n        case Enums_1.RotateDirection.counterClockwise:\n        case \"counterClockwise\":\n          this.gradient.angle.status = Enums_1.AnimationStatus.decreasing;\n          break;\n\n        case Enums_1.RotateDirection.clockwise:\n          this.gradient.angle.status = Enums_1.AnimationStatus.increasing;\n          break;\n      }\n\n      for (const grColor of gradient.colors) {\n        const grHslColor = Utils_1.colorToHsl(grColor.value, this.id, reduceDuplicates);\n\n        if (grHslColor) {\n          const grHslAnimation = Utils_1.getHslAnimationFromHsl(grHslColor, grColor.value.animation, container.retina.reduceFactor);\n          const addColor = {\n            stop: grColor.stop,\n            value: grHslAnimation,\n            opacity: grColor.opacity ? {\n              enable: grColor.opacity.animation.enable,\n              max: Utils_1.getRangeMax(grColor.opacity.value),\n              min: Utils_1.getRangeMin(grColor.opacity.value),\n              status: Enums_1.AnimationStatus.increasing,\n              value: Utils_1.getRangeValue(grColor.opacity.value),\n              velocity: grColor.opacity.animation.speed / 100 * container.retina.reduceFactor\n            } : undefined\n          };\n\n          if (grColor.opacity && addColor.opacity) {\n            const opacityRange = grColor.opacity.value;\n            addColor.opacity.min = Utils_1.getRangeMin(opacityRange);\n            addColor.opacity.max = Utils_1.getRangeMax(opacityRange);\n            const opacityAnimation = grColor.opacity.animation;\n\n            switch (opacityAnimation.startValue) {\n              case Enums_1.StartValueType.min:\n                addColor.opacity.value = addColor.opacity.min;\n                addColor.opacity.status = Enums_1.AnimationStatus.increasing;\n                break;\n\n              case Enums_1.StartValueType.random:\n                addColor.opacity.value = Utils_1.randomInRange(addColor.opacity);\n                addColor.opacity.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                break;\n\n              case Enums_1.StartValueType.max:\n              default:\n                addColor.opacity.value = addColor.opacity.max;\n                addColor.opacity.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            }\n          }\n\n          this.gradient.colors.push(addColor);\n        }\n      }\n    }\n\n    const rollOpt = this.options.roll;\n\n    if (rollOpt.enable) {\n      if (this.color) {\n        if (rollOpt.backColor) {\n          this.backColor = Utils_1.colorToHsl(rollOpt.backColor);\n        } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n          this.alterType = Math.random() >= 0.5 ? Enums_1.AlterType.darken : Enums_1.AlterType.enlighten;\n          this.alterValue = this.alterType === Enums_1.AlterType.darken ? rollOpt.darken.value : rollOpt.enlighten.value;\n        } else if (rollOpt.darken.enable) {\n          this.alterType = Enums_1.AlterType.darken;\n          this.alterValue = rollOpt.darken.value;\n        } else if (rollOpt.enlighten.enable) {\n          this.alterType = Enums_1.AlterType.enlighten;\n          this.alterValue = rollOpt.enlighten.value;\n        }\n      }\n\n      this.rollAngle = Math.random() * Math.PI * 2;\n      this.rollSpeed = Utils_1.getRangeValue(rollOpt.speed) / 360;\n    } else {\n      this.rollAngle = 0;\n      this.rollSpeed = 0;\n    }\n\n    const wobbleOpt = this.options.wobble;\n\n    if (wobbleOpt.enable) {\n      this.wobbleAngle = Math.random() * Math.PI * 2;\n      this.wobbleSpeed = Utils_1.getRangeValue(wobbleOpt.speed) / 360;\n    } else {\n      this.wobbleAngle = 0;\n      this.wobbleSpeed = 0;\n    }\n\n    this.position = this.calcPosition(container, position, Utils_1.clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    this.offset = Vector_1.Vector.origin;\n    const particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    const opacityOptions = this.options.opacity;\n    this.opacity = {\n      enable: opacityOptions.animation.enable,\n      max: Utils_1.getRangeMax(opacityOptions.value),\n      min: Utils_1.getRangeMin(opacityOptions.value),\n      value: Utils_1.getRangeValue(opacityOptions.value),\n      loops: 0,\n      maxLoops: opacityOptions.animation.count\n    };\n    const opacityAnimation = opacityOptions.animation;\n\n    if (opacityAnimation.enable) {\n      this.opacity.status = Enums_1.AnimationStatus.increasing;\n      const opacityRange = opacityOptions.value;\n      this.opacity.min = Utils_1.getRangeMin(opacityRange);\n      this.opacity.max = Utils_1.getRangeMax(opacityRange);\n\n      switch (opacityAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.opacity.value = this.opacity.min;\n          this.opacity.status = Enums_1.AnimationStatus.increasing;\n          break;\n\n        case Enums_1.StartValueType.random:\n          this.opacity.value = Utils_1.randomInRange(this.opacity);\n          this.opacity.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n\n        case Enums_1.StartValueType.max:\n        default:\n          this.opacity.value = this.opacity.max;\n          this.opacity.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n\n      this.opacity.velocity = opacityAnimation.speed / 100 * container.retina.reduceFactor;\n\n      if (!opacityAnimation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    this.stroke = this.options.stroke instanceof Array ? Utils_1.itemFromArray(this.options.stroke, this.id, reduceDuplicates) : this.options.stroke;\n    this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n    const strokeHslColor = (_h = Utils_1.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n\n    if (strokeHslColor) {\n      this.strokeColor = Utils_1.getHslAnimationFromHsl(strokeHslColor, (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation, container.retina.reduceFactor);\n    }\n\n    this.life = this.loadLife();\n    this.spawning = this.life.delay > 0;\n\n    if (this.options.move.spin.enable) {\n      const spinPos = (_k = this.options.move.spin.position) !== null && _k !== void 0 ? _k : {\n        x: 50,\n        y: 50\n      };\n      const spinCenter = {\n        x: spinPos.x / 100 * container.canvas.size.width,\n        y: spinPos.y / 100 * container.canvas.size.height\n      };\n      const pos = this.getPosition();\n      const distance = Utils_1.getDistance(pos, spinCenter);\n      this.spin = {\n        center: spinCenter,\n        direction: this.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise,\n        angle: this.velocity.angle,\n        radius: distance,\n        acceleration: Utils_1.getRangeValue(this.options.move.spin.acceleration)\n      };\n    }\n\n    this.shadowColor = Utils_1.colorToRgb(this.options.shadow.color);\n\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleCreated) {\n        plugin.particleCreated(this);\n      }\n    }\n  }\n\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n\n  isInsideCanvas() {\n    const radius = this.getRadius();\n    const canvasSize = this.container.canvas.size;\n    return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n  }\n\n  draw(delta) {\n    const container = this.container;\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawParticlePlugin(plugin, this, delta);\n    }\n\n    container.canvas.drawParticle(this, delta);\n  }\n\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n\n  getRadius() {\n    return this.bubble.radius || this.size.value;\n  }\n\n  getMass() {\n    const radius = this.getRadius();\n    return Math.pow(radius, 2) * Math.PI / 2;\n  }\n\n  getFillColor() {\n    if (this.bubble.color) {\n      return this.bubble.color;\n    }\n\n    const color = Utils_1.getHslFromAnimation(this.color);\n\n    if (color && (this.backColor || this.alterType && this.alterValue !== undefined)) {\n      const rolled = Math.floor(this.rollAngle / (Math.PI / 2)) % 2;\n\n      if (rolled) {\n        if (this.backColor) {\n          return this.backColor;\n        } else if (this.alterType && this.alterValue !== undefined) {\n          return {\n            h: color.h,\n            s: color.s,\n            l: color.l + (this.alterType === Enums_1.AlterType.darken ? -1 : 1) * this.alterValue\n          };\n        }\n      }\n    }\n\n    return color;\n  }\n\n  getStrokeColor() {\n    var _a, _b;\n\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n\n  destroy(override) {\n    this.destroyed = true;\n    this.bubble.inRange = false;\n\n    if (this.unbreakable) {\n      return;\n    }\n\n    this.destroyed = true;\n    this.bubble.inRange = false;\n\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n\n    if (override) {\n      return;\n    }\n\n    const destroyOptions = this.options.destroy;\n\n    if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n      this.split();\n    }\n  }\n\n  reset() {\n    this.opacity.loops = 0;\n    this.size.loops = 0;\n  }\n\n  split() {\n    const splitOptions = this.options.destroy.split;\n\n    if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n      return;\n    }\n\n    const rate = Utils_1.getRangeValue(splitOptions.rate.value);\n\n    for (let i = 0; i < rate; i++) {\n      this.container.particles.addSplitParticle(this);\n    }\n  }\n\n  calcPosition(container, position, zIndex, tryCount = 0) {\n    var _a, _b, _c, _d, _e, _f;\n\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n      if (pluginPos !== undefined) {\n        return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n      }\n    }\n\n    const canvasSize = container.canvas.size;\n    const pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n    const radius = this.getRadius();\n    const outModes = this.options.move.outModes;\n\n    const fixHorizontal = outMode => {\n      if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n        if (pos.x > container.canvas.size.width - radius * 2) {\n          pos.x -= radius;\n        } else if (pos.x < radius * 2) {\n          pos.x += radius;\n        }\n      }\n    };\n\n    const fixVertical = outMode => {\n      if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n        if (pos.y > container.canvas.size.height - radius * 2) {\n          pos.y -= radius;\n        } else if (pos.y < radius * 2) {\n          pos.y += radius;\n        }\n      }\n    };\n\n    fixHorizontal((_c = outModes.left) !== null && _c !== void 0 ? _c : outModes.default);\n    fixHorizontal((_d = outModes.right) !== null && _d !== void 0 ? _d : outModes.default);\n    fixVertical((_e = outModes.top) !== null && _e !== void 0 ? _e : outModes.default);\n    fixVertical((_f = outModes.bottom) !== null && _f !== void 0 ? _f : outModes.default);\n\n    if (this.checkOverlap(pos, tryCount)) {\n      return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n    }\n\n    return pos;\n  }\n\n  checkOverlap(pos, tryCount = 0) {\n    const collisionsOptions = this.options.collisions;\n    const radius = this.getRadius();\n\n    if (!collisionsOptions.enable) {\n      return false;\n    }\n\n    const overlapOptions = collisionsOptions.overlap;\n\n    if (overlapOptions.enable) {\n      return false;\n    }\n\n    const retries = overlapOptions.retries;\n\n    if (retries >= 0 && tryCount > retries) {\n      throw new Error(\"Particle is overlapping and can't be placed\");\n    }\n\n    let overlaps = false;\n\n    for (const particle of this.container.particles.array) {\n      if (Utils_1.getDistance(pos, particle.position) < radius + particle.getRadius()) {\n        overlaps = true;\n        break;\n      }\n    }\n\n    return overlaps;\n  }\n\n  calculateVelocity() {\n    const baseVelocity = Utils_1.getParticleBaseVelocity(this.direction);\n    const res = baseVelocity.copy();\n    const moveOptions = this.options.move;\n    const rad = Math.PI / 180 * moveOptions.angle.value;\n    const radOffset = Math.PI / 180 * moveOptions.angle.offset;\n    const range = {\n      left: radOffset - rad / 2,\n      right: radOffset + rad / 2\n    };\n\n    if (!moveOptions.straight) {\n      res.angle += Utils_1.randomInRange(Utils_1.setRangeValue(range.left, range.right));\n    }\n\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= Math.random();\n    }\n\n    return res;\n  }\n\n  loadShapeData(shapeOptions, reduceDuplicates) {\n    const shapeData = shapeOptions.options[this.shape];\n\n    if (shapeData) {\n      return Utils_1.deepExtend({}, shapeData instanceof Array ? Utils_1.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n    }\n  }\n\n  loadLife() {\n    const container = this.container;\n    const particlesOptions = this.options;\n    const lifeOptions = particlesOptions.life;\n    const life = {\n      delay: container.retina.reduceFactor ? Utils_1.getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      delayTime: 0,\n      duration: container.retina.reduceFactor ? Utils_1.getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      time: 0,\n      count: particlesOptions.life.count\n    };\n\n    if (life.duration <= 0) {\n      life.duration = -1;\n    }\n\n    if (life.count <= 0) {\n      life.count = -1;\n    }\n\n    return life;\n  }\n\n}\n\nexports.Particle = Particle;","map":{"version":3,"sources":["/Users/dwaynehovington/Desktop/portfolio4.00/portfolio/node_modules/tsparticles/Core/Particle.js"],"names":["Object","defineProperty","exports","value","Particle","ParticlesOptions_1","require","Shape_1","Enums_1","Utils_1","Vector_1","Vector3d_1","constructor","id","container","position","overrideOptions","group","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","maxDistance","pxRatio","retina","pixelRatio","options","actualOptions","particlesOptions","ParticlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","loadShapeData","undefined","zIndexValue","getRangeValue","zIndex","pathDelay","getValue","move","path","delay","wobbleDistance","initParticle","sizeOptions","size","sizeValue","sizeRange","enable","animation","max","getRangeMax","min","getRangeMin","loops","maxLoops","count","sizeAnimation","status","AnimationStatus","increasing","startValue","StartValueType","random","randomInRange","Math","decreasing","velocity","sizeAnimationSpeed","reduceFactor","sync","direction","getParticleDirectionAngle","bubble","inRange","initialVelocity","calculateVelocity","copy","rotateOptions","rotate","PI","rotateDirection","RotateDirection","index","floor","counterClockwise","clockwise","rotateAnimation","speed","tiltOptions","tilt","sinDirection","cosDirection","tiltDirection","TiltDirection","tiltAnimation","orbitOptions","orbit","orbitRotation","rotation","orbitColor","colorToHsl","color","hslColor","getHslAnimationFromHsl","gradient","angle","colors","grColor","grHslColor","grHslAnimation","addColor","stop","opacity","opacityRange","opacityAnimation","push","rollOpt","roll","backColor","darken","enlighten","alterType","AlterType","alterValue","rollAngle","rollSpeed","wobbleOpt","wobble","wobbleAngle","wobbleSpeed","calcPosition","clamp","zLayers","initialPosition","offset","Vector","origin","needsSort","lastZIndex","z","zIndexFactor","opacityOptions","sides","drawer","drawers","get","Plugins","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","stroke","strokeWidth","width","strokeHslColor","getFillColor","strokeColor","life","loadLife","spawning","spin","spinPos","x","y","spinCenter","canvas","height","pos","getPosition","distance","getDistance","center","radius","acceleration","shadowColor","colorToRgb","shadow","particleInit","plugin","plugins","particleCreated","isVisible","isInsideCanvas","getRadius","canvasSize","draw","delta","drawParticlePlugin","drawParticle","getMass","pow","getHslFromAnimation","rolled","h","s","l","getStrokeColor","destroy","override","particleDestroyed","destroyOptions","mode","DestroyMode","split","reset","splitOptions","rate","i","addSplitParticle","tryCount","pluginPos","particlePosition","Vector3d","create","outModes","fixHorizontal","outMode","isInArray","OutMode","bounce","bounceHorizontal","fixVertical","bounceVertical","left","default","right","top","bottom","checkOverlap","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","particle","array","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","radOffset","range","straight","setRangeValue","length","deepExtend","lifeOptions","delayTime","duration","time"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particle = void 0;\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nconst Vector_1 = require(\"./Particle/Vector\");\nconst Vector3d_1 = require(\"./Particle/Vector3d\");\nclass Particle {\n    constructor(id, container, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        this.id = id;\n        this.container = container;\n        this.group = group;\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.maxDistance = {};\n        const pxRatio = container.retina.pixelRatio;\n        const options = container.actualOptions;\n        const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n        particlesOptions.load(options.particles);\n        const shapeType = particlesOptions.shape.type;\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? Utils_1.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? Utils_1.itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape_1.Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n            }\n        }\n        else {\n            this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        const zIndexValue = Utils_1.getRangeValue(this.options.zIndex.value);\n        this.pathDelay = Utils_1.getValue(this.options.move.path.delay) * 1000;\n        this.wobbleDistance = 0;\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size;\n        const sizeValue = Utils_1.getValue(sizeOptions) * container.retina.pixelRatio;\n        const sizeRange = sizeOptions.value;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: sizeValue,\n            max: Utils_1.getRangeMax(sizeRange) * pxRatio,\n            min: Utils_1.getRangeMin(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: sizeOptions.animation.count,\n        };\n        const sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = Enums_1.AnimationStatus.increasing;\n            switch (sizeAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.size.value = this.size.min;\n                    this.size.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.size.value = Utils_1.randomInRange(this.size) * pxRatio;\n                    this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.size.velocity =\n                (((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.direction = Utils_1.getParticleDirectionAngle(this.options.move.direction);\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const rotateOptions = this.options.rotate;\n        this.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: (Utils_1.getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === Enums_1.RotateDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n        }\n        switch (rotateDirection) {\n            case Enums_1.RotateDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.rotate.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.RotateDirection.clockwise:\n                this.rotate.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const rotateAnimation = this.options.rotate.animation;\n        if (rotateAnimation.enable) {\n            this.rotate.velocity = (rotateAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                this.rotate.velocity *= Math.random();\n            }\n        }\n        const tiltOptions = this.options.tilt;\n        this.tilt = {\n            enable: tiltOptions.enable,\n            value: (Utils_1.getRangeValue(tiltOptions.value) * Math.PI) / 180,\n            sinDirection: Math.random() >= 0.5 ? 1 : -1,\n            cosDirection: Math.random() >= 0.5 ? 1 : -1,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === Enums_1.TiltDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n        }\n        switch (tiltDirection) {\n            case Enums_1.TiltDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.tilt.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.TiltDirection.clockwise:\n                this.tilt.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const tiltAnimation = this.options.tilt.animation;\n        if (tiltAnimation.enable) {\n            this.tilt.velocity = (tiltAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                this.tilt.velocity *= Math.random();\n            }\n        }\n        const orbitOptions = particlesOptions.orbit;\n        if (orbitOptions.enable) {\n            this.orbitRotation = Utils_1.getRangeValue(orbitOptions.rotation.value);\n            this.orbitColor = Utils_1.colorToHsl(orbitOptions.color);\n        }\n        const hslColor = Utils_1.colorToHsl(this.options.color, this.id, reduceDuplicates);\n        if (hslColor) {\n            this.color = Utils_1.getHslAnimationFromHsl(hslColor, this.options.color.animation, container.retina.reduceFactor);\n        }\n        const gradient = this.options.gradient instanceof Array ? Utils_1.itemFromArray(this.options.gradient) : this.options.gradient;\n        if (gradient) {\n            this.gradient = {\n                angle: {\n                    value: gradient.angle.value,\n                    enable: gradient.angle.animation.enable,\n                    velocity: (gradient.angle.animation.speed / 360) * container.retina.reduceFactor,\n                },\n                type: gradient.type,\n                colors: [],\n            };\n            let rotateDirection = gradient.angle.direction;\n            if (rotateDirection === Enums_1.RotateDirection.random) {\n                const index = Math.floor(Math.random() * 2);\n                rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n            }\n            switch (rotateDirection) {\n                case Enums_1.RotateDirection.counterClockwise:\n                case \"counterClockwise\":\n                    this.gradient.angle.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.RotateDirection.clockwise:\n                    this.gradient.angle.status = Enums_1.AnimationStatus.increasing;\n                    break;\n            }\n            for (const grColor of gradient.colors) {\n                const grHslColor = Utils_1.colorToHsl(grColor.value, this.id, reduceDuplicates);\n                if (grHslColor) {\n                    const grHslAnimation = Utils_1.getHslAnimationFromHsl(grHslColor, grColor.value.animation, container.retina.reduceFactor);\n                    const addColor = {\n                        stop: grColor.stop,\n                        value: grHslAnimation,\n                        opacity: grColor.opacity\n                            ? {\n                                enable: grColor.opacity.animation.enable,\n                                max: Utils_1.getRangeMax(grColor.opacity.value),\n                                min: Utils_1.getRangeMin(grColor.opacity.value),\n                                status: Enums_1.AnimationStatus.increasing,\n                                value: Utils_1.getRangeValue(grColor.opacity.value),\n                                velocity: (grColor.opacity.animation.speed / 100) * container.retina.reduceFactor,\n                            }\n                            : undefined,\n                    };\n                    if (grColor.opacity && addColor.opacity) {\n                        const opacityRange = grColor.opacity.value;\n                        addColor.opacity.min = Utils_1.getRangeMin(opacityRange);\n                        addColor.opacity.max = Utils_1.getRangeMax(opacityRange);\n                        const opacityAnimation = grColor.opacity.animation;\n                        switch (opacityAnimation.startValue) {\n                            case Enums_1.StartValueType.min:\n                                addColor.opacity.value = addColor.opacity.min;\n                                addColor.opacity.status = Enums_1.AnimationStatus.increasing;\n                                break;\n                            case Enums_1.StartValueType.random:\n                                addColor.opacity.value = Utils_1.randomInRange(addColor.opacity);\n                                addColor.opacity.status =\n                                    Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                                break;\n                            case Enums_1.StartValueType.max:\n                            default:\n                                addColor.opacity.value = addColor.opacity.max;\n                                addColor.opacity.status = Enums_1.AnimationStatus.decreasing;\n                                break;\n                        }\n                    }\n                    this.gradient.colors.push(addColor);\n                }\n            }\n        }\n        const rollOpt = this.options.roll;\n        if (rollOpt.enable) {\n            if (this.color) {\n                if (rollOpt.backColor) {\n                    this.backColor = Utils_1.colorToHsl(rollOpt.backColor);\n                }\n                else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n                    this.alterType = Math.random() >= 0.5 ? Enums_1.AlterType.darken : Enums_1.AlterType.enlighten;\n                    this.alterValue =\n                        this.alterType === Enums_1.AlterType.darken ? rollOpt.darken.value : rollOpt.enlighten.value;\n                }\n                else if (rollOpt.darken.enable) {\n                    this.alterType = Enums_1.AlterType.darken;\n                    this.alterValue = rollOpt.darken.value;\n                }\n                else if (rollOpt.enlighten.enable) {\n                    this.alterType = Enums_1.AlterType.enlighten;\n                    this.alterValue = rollOpt.enlighten.value;\n                }\n            }\n            this.rollAngle = Math.random() * Math.PI * 2;\n            this.rollSpeed = Utils_1.getRangeValue(rollOpt.speed) / 360;\n        }\n        else {\n            this.rollAngle = 0;\n            this.rollSpeed = 0;\n        }\n        const wobbleOpt = this.options.wobble;\n        if (wobbleOpt.enable) {\n            this.wobbleAngle = Math.random() * Math.PI * 2;\n            this.wobbleSpeed = Utils_1.getRangeValue(wobbleOpt.speed) / 360;\n        }\n        else {\n            this.wobbleAngle = 0;\n            this.wobbleSpeed = 0;\n        }\n        this.position = this.calcPosition(container, position, Utils_1.clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        this.offset = Vector_1.Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        const opacityOptions = this.options.opacity;\n        this.opacity = {\n            enable: opacityOptions.animation.enable,\n            max: Utils_1.getRangeMax(opacityOptions.value),\n            min: Utils_1.getRangeMin(opacityOptions.value),\n            value: Utils_1.getRangeValue(opacityOptions.value),\n            loops: 0,\n            maxLoops: opacityOptions.animation.count,\n        };\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            this.opacity.status = Enums_1.AnimationStatus.increasing;\n            const opacityRange = opacityOptions.value;\n            this.opacity.min = Utils_1.getRangeMin(opacityRange);\n            this.opacity.max = Utils_1.getRangeMax(opacityRange);\n            switch (opacityAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.opacity.value = this.opacity.min;\n                    this.opacity.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.opacity.value = Utils_1.randomInRange(this.opacity);\n                    this.opacity.status =\n                        Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.opacity.value = this.opacity.max;\n                    this.opacity.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.opacity.velocity = (opacityAnimation.speed / 100) * container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                this.opacity.velocity *= Math.random();\n            }\n        }\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.stroke =\n            this.options.stroke instanceof Array\n                ? Utils_1.itemFromArray(this.options.stroke, this.id, reduceDuplicates)\n                : this.options.stroke;\n        this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n        const strokeHslColor = (_h = Utils_1.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n        if (strokeHslColor) {\n            this.strokeColor = Utils_1.getHslAnimationFromHsl(strokeHslColor, (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation, container.retina.reduceFactor);\n        }\n        this.life = this.loadLife();\n        this.spawning = this.life.delay > 0;\n        if (this.options.move.spin.enable) {\n            const spinPos = (_k = this.options.move.spin.position) !== null && _k !== void 0 ? _k : { x: 50, y: 50 };\n            const spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            };\n            const pos = this.getPosition();\n            const distance = Utils_1.getDistance(pos, spinCenter);\n            this.spin = {\n                center: spinCenter,\n                direction: this.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise,\n                angle: this.velocity.angle,\n                radius: distance,\n                acceleration: Utils_1.getRangeValue(this.options.move.spin.acceleration),\n            };\n        }\n        this.shadowColor = Utils_1.colorToRgb(this.options.shadow.color);\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleCreated) {\n                plugin.particleCreated(this);\n            }\n        }\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius();\n        const canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius || this.size.value;\n    }\n    getMass() {\n        const radius = this.getRadius();\n        return (Math.pow(radius, 2) * Math.PI) / 2;\n    }\n    getFillColor() {\n        if (this.bubble.color) {\n            return this.bubble.color;\n        }\n        const color = Utils_1.getHslFromAnimation(this.color);\n        if (color && (this.backColor || (this.alterType && this.alterValue !== undefined))) {\n            const rolled = Math.floor(this.rollAngle / (Math.PI / 2)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                else if (this.alterType && this.alterValue !== undefined) {\n                    return {\n                        h: color.h,\n                        s: color.s,\n                        l: color.l + (this.alterType === Enums_1.AlterType.darken ? -1 : 1) * this.alterValue,\n                    };\n                }\n            }\n        }\n        return color;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n            this.split();\n        }\n    }\n    reset() {\n        this.opacity.loops = 0;\n        this.size.loops = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = Utils_1.getRangeValue(splitOptions.rate.value);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d, _e, _f;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size;\n        const pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n        const radius = this.getRadius();\n        const outModes = this.options.move.outModes;\n        const fixHorizontal = (outMode) => {\n            if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n                if (pos.x > container.canvas.size.width - radius * 2) {\n                    pos.x -= radius;\n                }\n                else if (pos.x < radius * 2) {\n                    pos.x += radius;\n                }\n            }\n        };\n        const fixVertical = (outMode) => {\n            if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n                if (pos.y > container.canvas.size.height - radius * 2) {\n                    pos.y -= radius;\n                }\n                else if (pos.y < radius * 2) {\n                    pos.y += radius;\n                }\n            }\n        };\n        fixHorizontal((_c = outModes.left) !== null && _c !== void 0 ? _c : outModes.default);\n        fixHorizontal((_d = outModes.right) !== null && _d !== void 0 ? _d : outModes.default);\n        fixVertical((_e = outModes.top) !== null && _e !== void 0 ? _e : outModes.default);\n        fixVertical((_f = outModes.bottom) !== null && _f !== void 0 ? _f : outModes.default);\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions;\n        const radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if (Utils_1.getDistance(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    calculateVelocity() {\n        const baseVelocity = Utils_1.getParticleBaseVelocity(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        const rad = (Math.PI / 180) * moveOptions.angle.value;\n        const radOffset = (Math.PI / 180) * moveOptions.angle.offset;\n        const range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += Utils_1.randomInRange(Utils_1.setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return Utils_1.deepExtend({}, shapeData instanceof Array ? Utils_1.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n    }\n    loadLife() {\n        const container = this.container;\n        const particlesOptions = this.options;\n        const lifeOptions = particlesOptions.life;\n        const life = {\n            delay: container.retina.reduceFactor\n                ? ((Utils_1.getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((Utils_1.getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: particlesOptions.life.count,\n        };\n        if (life.duration <= 0) {\n            life.duration = -1;\n        }\n        if (life.count <= 0) {\n            life.count = -1;\n        }\n        return life;\n    }\n}\nexports.Particle = Particle;\n"]},"metadata":{},"sourceType":"script"}