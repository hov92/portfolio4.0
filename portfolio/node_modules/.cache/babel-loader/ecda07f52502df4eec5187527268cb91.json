{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CircleShape = void 0;\n\nclass CircleShape {\n  randomPosition(position, offset, fill) {\n    const generateTheta = (x, y) => {\n      const u = Math.random() / 4.0;\n      const theta = Math.atan(y / x * Math.tan(2 * Math.PI * u));\n      const v = Math.random();\n\n      if (v < 0.25) {\n        return theta;\n      } else if (v < 0.5) {\n        return Math.PI - theta;\n      } else if (v < 0.75) {\n        return Math.PI + theta;\n      } else {\n        return -theta;\n      }\n    };\n\n    const radius = (x, y, theta) => x * y / Math.sqrt(Math.pow(y * Math.cos(theta), 2) + Math.pow(x * Math.sin(theta), 2));\n\n    const [a, b] = [offset.x / 2, offset.y / 2];\n    const randomTheta = generateTheta(a, b),\n          maxRadius = radius(a, b, randomTheta),\n          randomRadius = fill ? maxRadius * Math.sqrt(Math.random()) : maxRadius;\n    return {\n      x: position.x + randomRadius * Math.cos(randomTheta),\n      y: position.y + randomRadius * Math.sin(randomTheta)\n    };\n  }\n\n}\n\nexports.CircleShape = CircleShape;","map":{"version":3,"sources":["/Users/dwaynehovington/Desktop/portfolio4.0/portfolio/node_modules/tsparticles/Plugins/Emitters/Shapes/Circle/CircleShape.js"],"names":["Object","defineProperty","exports","value","CircleShape","randomPosition","position","offset","fill","generateTheta","x","y","u","Math","random","theta","atan","tan","PI","v","radius","sqrt","pow","cos","sin","a","b","randomTheta","maxRadius","randomRadius"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsB,KAAK,CAA3B;;AACA,MAAMA,WAAN,CAAkB;AACdC,EAAAA,cAAc,CAACC,QAAD,EAAWC,MAAX,EAAmBC,IAAnB,EAAyB;AACnC,UAAMC,aAAa,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC5B,YAAMC,CAAC,GAAGC,IAAI,CAACC,MAAL,KAAgB,GAA1B;AACA,YAAMC,KAAK,GAAGF,IAAI,CAACG,IAAL,CAAWL,CAAC,GAAGD,CAAL,GAAUG,IAAI,CAACI,GAAL,CAAS,IAAIJ,IAAI,CAACK,EAAT,GAAcN,CAAvB,CAApB,CAAd;AACA,YAAMO,CAAC,GAAGN,IAAI,CAACC,MAAL,EAAV;;AACA,UAAIK,CAAC,GAAG,IAAR,EAAc;AACV,eAAOJ,KAAP;AACH,OAFD,MAGK,IAAII,CAAC,GAAG,GAAR,EAAa;AACd,eAAON,IAAI,CAACK,EAAL,GAAUH,KAAjB;AACH,OAFI,MAGA,IAAII,CAAC,GAAG,IAAR,EAAc;AACf,eAAON,IAAI,CAACK,EAAL,GAAUH,KAAjB;AACH,OAFI,MAGA;AACD,eAAO,CAACA,KAAR;AACH;AACJ,KAhBD;;AAiBA,UAAMK,MAAM,GAAG,CAACV,CAAD,EAAIC,CAAJ,EAAOI,KAAP,KAAkBL,CAAC,GAAGC,CAAL,GAAUE,IAAI,CAACQ,IAAL,CAAUR,IAAI,CAACS,GAAL,CAAUX,CAAC,GAAGE,IAAI,CAACU,GAAL,CAASR,KAAT,CAAd,EAAgC,CAAhC,IAAqCF,IAAI,CAACS,GAAL,CAAUZ,CAAC,GAAGG,IAAI,CAACW,GAAL,CAAST,KAAT,CAAd,EAAgC,CAAhC,CAA/C,CAA1C;;AACA,UAAM,CAACU,CAAD,EAAIC,CAAJ,IAAS,CAACnB,MAAM,CAACG,CAAP,GAAW,CAAZ,EAAeH,MAAM,CAACI,CAAP,GAAW,CAA1B,CAAf;AACA,UAAMgB,WAAW,GAAGlB,aAAa,CAACgB,CAAD,EAAIC,CAAJ,CAAjC;AAAA,UAAyCE,SAAS,GAAGR,MAAM,CAACK,CAAD,EAAIC,CAAJ,EAAOC,WAAP,CAA3D;AAAA,UAAgFE,YAAY,GAAGrB,IAAI,GAAGoB,SAAS,GAAGf,IAAI,CAACQ,IAAL,CAAUR,IAAI,CAACC,MAAL,EAAV,CAAf,GAA0Cc,SAA7I;AACA,WAAO;AACHlB,MAAAA,CAAC,EAAEJ,QAAQ,CAACI,CAAT,GAAamB,YAAY,GAAGhB,IAAI,CAACU,GAAL,CAASI,WAAT,CAD5B;AAEHhB,MAAAA,CAAC,EAAEL,QAAQ,CAACK,CAAT,GAAakB,YAAY,GAAGhB,IAAI,CAACW,GAAL,CAASG,WAAT;AAF5B,KAAP;AAIH;;AA1Ba;;AA4BlBzB,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CircleShape = void 0;\nclass CircleShape {\n    randomPosition(position, offset, fill) {\n        const generateTheta = (x, y) => {\n            const u = Math.random() / 4.0;\n            const theta = Math.atan((y / x) * Math.tan(2 * Math.PI * u));\n            const v = Math.random();\n            if (v < 0.25) {\n                return theta;\n            }\n            else if (v < 0.5) {\n                return Math.PI - theta;\n            }\n            else if (v < 0.75) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        };\n        const radius = (x, y, theta) => (x * y) / Math.sqrt(Math.pow((y * Math.cos(theta)), 2) + Math.pow((x * Math.sin(theta)), 2));\n        const [a, b] = [offset.x / 2, offset.y / 2];\n        const randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(Math.random()) : maxRadius;\n        return {\n            x: position.x + randomRadius * Math.cos(randomTheta),\n            y: position.y + randomRadius * Math.sin(randomTheta),\n        };\n    }\n}\nexports.CircleShape = CircleShape;\n"]},"metadata":{},"sourceType":"script"}