{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/dwaynehovington/Desktop/portfolio4.00/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/dwaynehovington/Desktop/portfolio4.00/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/dwaynehovington/Desktop/portfolio4.00/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/dwaynehovington/Desktop/portfolio4.00/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/dwaynehovington/Desktop/portfolio4.00/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Grabber = void 0;\n\nvar Utils_1 = require(\"../../../Utils\");\n\nvar Enums_1 = require(\"../../../Enums\");\n\nvar ExternalInteractorBase_1 = require(\"../../../Core/ExternalInteractorBase\");\n\nvar Grabber = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Grabber, _ExternalInteractorBa);\n\n  var _super = _createSuper(Grabber);\n\n  function Grabber(container) {\n    _classCallCheck(this, Grabber);\n\n    return _super.call(this, container);\n  }\n\n  _createClass(Grabber, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container,\n          mouse = container.interactivity.mouse,\n          events = container.actualOptions.interactivity.events;\n      return events.onHover.enable && !!mouse.position && Utils_1.isInArray(Enums_1.HoverMode.grab, events.onHover.mode);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function interact() {\n      var _a;\n\n      var container = this.container,\n          options = container.actualOptions,\n          interactivity = options.interactivity;\n\n      if (interactivity.events.onHover.enable && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n        var mousePos = container.interactivity.mouse.position;\n\n        if (!mousePos) {\n          return;\n        }\n\n        var distance = container.retina.grabModeDistance,\n            query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n        var _iterator = _createForOfIteratorHelper(query),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var particle = _step.value;\n            var pos = particle.getPosition(),\n                pointDistance = Utils_1.getDistance(pos, mousePos);\n\n            if (pointDistance <= distance) {\n              var grabLineOptions = interactivity.modes.grab.links,\n                  lineOpacity = grabLineOptions.opacity,\n                  opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n\n              if (opacityLine <= 0) {\n                continue;\n              }\n\n              var optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n\n              if (!container.particles.grabLineColor) {\n                var linksOptions = options.interactivity.modes.grab.links;\n                container.particles.grabLineColor = Utils_1.getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n              }\n\n              var colorLine = Utils_1.getLinkColor(particle, undefined, container.particles.grabLineColor);\n\n              if (!colorLine) {\n                return;\n              }\n\n              container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }]);\n\n  return Grabber;\n}(ExternalInteractorBase_1.ExternalInteractorBase);\n\nexports.Grabber = Grabber;","map":{"version":3,"sources":["/Users/dwaynehovington/Desktop/portfolio4.00/portfolio/node_modules/tsparticles/Interactions/External/Grab/Grabber.js"],"names":["Object","defineProperty","exports","value","Grabber","Utils_1","require","Enums_1","ExternalInteractorBase_1","container","mouse","interactivity","events","actualOptions","onHover","enable","position","isInArray","HoverMode","grab","mode","_a","options","status","Constants","mouseMoveEvent","mousePos","distance","retina","grabModeDistance","query","particles","quadTree","queryCircle","particle","pos","getPosition","pointDistance","getDistance","grabLineOptions","modes","links","lineOpacity","opacity","opacityLine","optColor","color","grabLineColor","linksOptions","getLinkRandomColor","blink","consent","colorLine","getLinkColor","undefined","canvas","drawGrabLine","ExternalInteractorBase"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grabber = void 0;\nconst Utils_1 = require(\"../../../Utils\");\nconst Enums_1 = require(\"../../../Enums\");\nconst ExternalInteractorBase_1 = require(\"../../../Core/ExternalInteractorBase\");\nclass Grabber extends ExternalInteractorBase_1.ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, mouse = container.interactivity.mouse, events = container.actualOptions.interactivity.events;\n        return events.onHover.enable && !!mouse.position && Utils_1.isInArray(Enums_1.HoverMode.grab, events.onHover.mode);\n    }\n    reset() {\n    }\n    interact() {\n        var _a;\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (interactivity.events.onHover.enable && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n            const mousePos = container.interactivity.mouse.position;\n            if (!mousePos) {\n                return;\n            }\n            const distance = container.retina.grabModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n            for (const particle of query) {\n                const pos = particle.getPosition(), pointDistance = Utils_1.getDistance(pos, mousePos);\n                if (pointDistance <= distance) {\n                    const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n                    if (opacityLine <= 0) {\n                        continue;\n                    }\n                    const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n                    if (!container.particles.grabLineColor) {\n                        const linksOptions = options.interactivity.modes.grab.links;\n                        container.particles.grabLineColor = Utils_1.getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n                    }\n                    const colorLine = Utils_1.getLinkColor(particle, undefined, container.particles.grabLineColor);\n                    if (!colorLine) {\n                        return;\n                    }\n                    container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n                }\n            }\n        }\n    }\n}\nexports.Grabber = Grabber;\n"]},"metadata":{},"sourceType":"script"}