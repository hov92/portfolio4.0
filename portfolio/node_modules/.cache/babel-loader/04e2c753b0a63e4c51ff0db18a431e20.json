{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/dwaynehovington/Desktop/portfolio4.0/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/dwaynehovington/Desktop/portfolio4.0/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FrameManager = void 0;\n\nvar FrameManager = /*#__PURE__*/function () {\n  function FrameManager(container) {\n    _classCallCheck(this, FrameManager);\n\n    this.container = container;\n  }\n\n  _createClass(FrameManager, [{\n    key: \"nextFrame\",\n    value: function nextFrame(timestamp) {\n      var _a;\n\n      try {\n        var container = this.container;\n\n        if (container.lastFrameTime !== undefined && timestamp < container.lastFrameTime + 1000 / container.fpsLimit) {\n          container.draw(false);\n          return;\n        }\n\n        (_a = container.lastFrameTime) !== null && _a !== void 0 ? _a : container.lastFrameTime = timestamp;\n        var deltaValue = timestamp - container.lastFrameTime;\n        var delta = {\n          value: deltaValue,\n          factor: 60 * deltaValue / 1000\n        };\n        container.lifeTime += delta.value;\n        container.lastFrameTime = timestamp;\n\n        if (deltaValue > 1000) {\n          container.draw(false);\n          return;\n        }\n\n        container.particles.draw(delta);\n\n        if (container.duration > 0 && container.lifeTime > container.duration) {\n          container.destroy();\n          return;\n        }\n\n        if (container.getAnimationStatus()) {\n          container.draw(false);\n        }\n      } catch (e) {\n        console.error(\"tsParticles error in animation loop\", e);\n      }\n    }\n  }]);\n\n  return FrameManager;\n}();\n\nexports.FrameManager = FrameManager;","map":{"version":3,"sources":["/Users/dwaynehovington/Desktop/portfolio4.0/portfolio/node_modules/tsparticles/Core/FrameManager.js"],"names":["Object","defineProperty","exports","value","FrameManager","container","timestamp","_a","lastFrameTime","undefined","fpsLimit","draw","deltaValue","delta","factor","lifeTime","particles","duration","destroy","getAnimationStatus","e","console","error"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;IACMA,Y;AACF,wBAAYC,SAAZ,EAAuB;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;;;;WACD,mBAAUC,SAAV,EAAqB;AACjB,UAAIC,EAAJ;;AACA,UAAI;AACA,YAAMF,SAAS,GAAG,KAAKA,SAAvB;;AACA,YAAIA,SAAS,CAACG,aAAV,KAA4BC,SAA5B,IACAH,SAAS,GAAGD,SAAS,CAACG,aAAV,GAA0B,OAAOH,SAAS,CAACK,QAD3D,EACqE;AACjEL,UAAAA,SAAS,CAACM,IAAV,CAAe,KAAf;AACA;AACH;;AACD,SAACJ,EAAE,GAAGF,SAAS,CAACG,aAAhB,MAAmC,IAAnC,IAA2CD,EAAE,KAAK,KAAK,CAAvD,GAA2DA,EAA3D,GAAiEF,SAAS,CAACG,aAAV,GAA0BF,SAA3F;AACA,YAAMM,UAAU,GAAGN,SAAS,GAAGD,SAAS,CAACG,aAAzC;AACA,YAAMK,KAAK,GAAG;AACVV,UAAAA,KAAK,EAAES,UADG;AAEVE,UAAAA,MAAM,EAAG,KAAKF,UAAN,GAAoB;AAFlB,SAAd;AAIAP,QAAAA,SAAS,CAACU,QAAV,IAAsBF,KAAK,CAACV,KAA5B;AACAE,QAAAA,SAAS,CAACG,aAAV,GAA0BF,SAA1B;;AACA,YAAIM,UAAU,GAAG,IAAjB,EAAuB;AACnBP,UAAAA,SAAS,CAACM,IAAV,CAAe,KAAf;AACA;AACH;;AACDN,QAAAA,SAAS,CAACW,SAAV,CAAoBL,IAApB,CAAyBE,KAAzB;;AACA,YAAIR,SAAS,CAACY,QAAV,GAAqB,CAArB,IAA0BZ,SAAS,CAACU,QAAV,GAAqBV,SAAS,CAACY,QAA7D,EAAuE;AACnEZ,UAAAA,SAAS,CAACa,OAAV;AACA;AACH;;AACD,YAAIb,SAAS,CAACc,kBAAV,EAAJ,EAAoC;AAChCd,UAAAA,SAAS,CAACM,IAAV,CAAe,KAAf;AACH;AACJ,OA3BD,CA4BA,OAAOS,CAAP,EAAU;AACNC,QAAAA,OAAO,CAACC,KAAR,CAAc,qCAAd,EAAqDF,CAArD;AACH;AACJ;;;;;;AAELlB,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FrameManager = void 0;\nclass FrameManager {\n    constructor(container) {\n        this.container = container;\n    }\n    nextFrame(timestamp) {\n        var _a;\n        try {\n            const container = this.container;\n            if (container.lastFrameTime !== undefined &&\n                timestamp < container.lastFrameTime + 1000 / container.fpsLimit) {\n                container.draw(false);\n                return;\n            }\n            (_a = container.lastFrameTime) !== null && _a !== void 0 ? _a : (container.lastFrameTime = timestamp);\n            const deltaValue = timestamp - container.lastFrameTime;\n            const delta = {\n                value: deltaValue,\n                factor: (60 * deltaValue) / 1000,\n            };\n            container.lifeTime += delta.value;\n            container.lastFrameTime = timestamp;\n            if (deltaValue > 1000) {\n                container.draw(false);\n                return;\n            }\n            container.particles.draw(delta);\n            if (container.duration > 0 && container.lifeTime > container.duration) {\n                container.destroy();\n                return;\n            }\n            if (container.getAnimationStatus()) {\n                container.draw(false);\n            }\n        }\n        catch (e) {\n            console.error(\"tsParticles error in animation loop\", e);\n        }\n    }\n}\nexports.FrameManager = FrameManager;\n"]},"metadata":{},"sourceType":"script"}